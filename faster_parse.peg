/*
Slow parse

expression:
  (1+2*3)*(4+5*6)

output:
  {
     "expr": 238,
     "matches": {
        "integer": 16,
        "primary": 18,
        "multiplicative": 14,
        "additive": 7,
        "start": 0
     },
     "total": 55
  }
*/

{
  var matches = {
    integer: 0,
    primary: 0,
    multiplicative: 0,
    additive: 0,
    start: 0
  };
}

start
  = expr:additive
    {
      matches['integer']++;
      return {
        expr:expr,
        matches:matches,
        total: matches['integer'] +
               matches['primary'] +
               matches['multiplicative'] +
               matches['additive'] +
               matches['start']
      };
    }

additive
  = m:multiplicative !("+")
    { matches['additive']++; return m; }
  / left:multiplicative "+" right:additive
    { matches['additive']++; return left + right; }

multiplicative
  = p:primary !("*")
    { matches['multiplicative']++; return p; }
  / left:primary "*" right:multiplicative
    { matches['multiplicative']++; return left * right; }

primary
  = i:integer
    { matches['primary']++; return i; }
  / "(" additive:additive ")"
    { matches['primary']++; return additive; }

integer "integer"
  = digits:[0-9]+
    { matches['integer']++; return parseInt(digits.join(""), 10); }
