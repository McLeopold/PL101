/* Grammar for Tortoise, a turtle-graphics language */

start
    = ws seq:statements
        { return seq; }

number_frac
    = "." chars:[0-9]*
        { return "." + chars.join(''); }

number
    = chars:[0-9]+ frac:number_frac?
        { return parseFloat(chars.join('') + frac); }
    / "-" chars:[0-9]+ frac:number_frac?
        { return -parseFloat(chars.join('') + frac); }

validfirstchar
    = [a-zA-Z_]

validchar
    = [0-9a-zA-Z_]

identifier
    = firstchar:validfirstchar chars:validchar*
        { return firstchar + chars.join(''); }

statement
    = "if" ws "(" ws expr:expression ws ")" ws 
        "{" ws body:statements ws "}" ws
        { return { tag:"if", expr:expr, body:body }; }
    / "define " ws v:identifier ws "(" ws ")" ws 
        "{" ws body:statements ws "}" ws
        { return { tag:"define", name:v, args:[], body:body }; }
    / "define " ws v:identifier ws "(" ws args:ident_list ws ")"
        ws "{" ws body:statements ws "}" ws
        { return { tag:"define", name:v, args:args, body:body }; }
    / "repeat" ws "(" ws expr:expression ws ")" ws
        "{" ws body:statements ws "}" ws
        { return { tag:"repeat", expr:expr, body:body }; }
    / "var " ws v:identifier ws ";" ws
        { return { tag:"var", name:v }; }
    / v:identifier ws ":=" ws expr:expression ws ";" ws
        { return { tag:":=", left:v, right:expr }; }
    / expr:expression ws ";" ws
        { return { tag:"ignore", body:expr }; }

statements
    = statement*

expression
    = expr:comparative
        { return expr; }

comp_op = "<=" / ">=" / "!=" / "==" / "<" / ">"

comparative
    = left:additive ws op:comp_op ws right:comparative
        { return {tag: op, left:left, right:right}; }
    / additive

additive_op = "+" / "-"

additive
    = left:multiplicative ws op:additive_op ws right:additive
        { return {tag:op, left:left, right:right}; }
    / multiplicative

mult_op = "*" / "/"

multiplicative
    = left:primary ws op:mult_op ws right:multiplicative
        { return {tag:op, left:left, right:right}; }
    / primary

primary
    = number
    / v:identifier "(" ws ")"
        { return {tag:"call", name:v, args:[]}; }
    / v:identifier "(" ws args:arglist ws ")"
        { return {tag:"call", name:v, args:args}; }
    / v:identifier
        { return {tag:"ident", name:v}; }
    / "(" ws expression:expression ws ")"
        { return expression; }

comma_expression = "," ws expr:expression
        { return expr; }

arglist
    = first:expression rest:comma_expression*
        { return [first].concat(rest); }

comma_identifier = "," ws v:identifier
        { return v; }

ident_list
    = first:identifier rest:comma_identifier*
        { return [first].concat(rest); }

ws = [ \t\n]*