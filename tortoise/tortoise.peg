/* Grammar for Tortoise, a turtle-graphics language */
{

    var line = null;
    var column = null;

    var matches = {
        start: 0,
        number_frac: 0,
        number: 0,
        string: 0,
        array: 0,
        validfirstchar: 0,
        validchar: 0,
        identifier: 0,
        statement: 0,
        index: 0,
        statements: 0,
        expression: 0,
        or_op: 0,
        logic_or: 0,
        and_op: 0,
        logic_and: 0,
        comp_op: 0,
        comparative: 0,
        additive_op: 0,
        additive: 0,
        mult_op: 0,
        multiplicative: 0,
        primary: 0,
        comma_expression: 0,
        arglist: 0,
        comma_identifier: 0,
        ident_list: 0,
        ws: 0
    };

    function loc(obj, loc) {
      if (typeof loc[0] === 'number') {
        obj.loc = loc;
      }
      return obj;
    }
}
start
    = ws seq:statements
        { return seq;
          matches['start']++;
          for (var prop in matches) {
            if (!matches[prop]) {
              delete matches[prop];
            }
          }
          return {matches: matches, seq: seq}; }

number_frac
    = "." chars:[0-9]*
        { matches['number_frac']++; return "." + chars.join(''); }

number
    = chars:[0-9]+ frac:number_frac?
        { matches['number']++; return parseFloat(chars.join('') + frac); }
    / "-" chars:[0-9]+ frac:number_frac?
        { matches['number']++; return -parseFloat(chars.join('') + frac); }

string
    = "'" chars:s_char* "'"
      { matches['string']++; return chars.join(''); }
    / '"' chars:d_char* '"'
      { matches['string']++; return chars.join(''); }
s_char
    = !( "'" / '\\' / EOLChar ) char:SourceChar
        { return char; }
    / '\\' char:escape
        { return JSON.parse('"\\' + char + '"'); }
d_char
    = !( '"' / '\\' / EOLChar ) char:SourceChar
        { return char; }
    / '\\' char:escape
        { return JSON.parse('"\\' + char + '"'); }
escape
    = single_escape_char
    / non_escape_char
    / "0" !([0-9])
    / hex_escape
    / unicode_escape
single_escape_char
    = [\u0027\u0022\u005Cbfnrtv]
non_escape_char
    = !(single_escape_char / [0-9ux] / EOLChar) SourceChar
hex_escape
    = "x" d1:hex d2:hex
        { return 'x' + d1 + d2; }
unicode_escape
    = "u" d1:hex d2:hex d3:hex d4:hex
        { return 'u' + d1 + d2 + d3 + d4; }
hex
    = [0-9a-fA-F]

array
    = '[' ws values:arglist ws ']'
      { matches['array']++; return values; }

validfirstchar
    = [a-zA-Z_]

validchar
    = [0-9a-zA-Z_]

identifier
    = firstchar:validfirstchar chars:validchar*
        { matches['identifier']++; return firstchar + chars.join(''); }

statement
    = "if" ws "(" ws expr:expression ws ")" ws 
        "{" ws body:statements ws "}" ws
        "else" ws "{" ws elsebody:statements ws "}" ws
        { matches['statement']++; return loc({ tag:"if", expr:expr, body:body, else:elsebody }, [line, column]); }
    / "if" ws "(" ws expr:expression ws ")" ws 
        "{" ws body:statements ws "}" ws
        { matches['statement']++; return loc({ tag:"if", expr:expr, body:body }, [line, column]); }
    / "define " ws v:identifier ws "(" ws ")" ws 
        "{" ws body:statements ws "}" ws
        { matches['statement']++; return loc({ tag:"define", name:v, args:[], body:body }, [line, column]); }
    / "define " ws v:identifier ws "(" ws args:ident_list ws ")"
        ws "{" ws body:statements ws "}" ws
        { matches['statement']++; return loc({ tag:"define", name:v, args:args, body:body }, [line, column]); }
    / "repeat"
        start:(ws expression)?                        // optional count/start
        stop:(ws "to" ws expression)?                 // optional stop
        step:(ws "by" ws expression)?                 // optional step
        name:(ws "as" ws identifier)?                // optional identifier
        ws "{" ws body:statements ws "}"              // required body
        elsebody:(ws "else" ws "{" ws statements ws "}")? // optional else
        ws
        {
          var t = {tag:"repeat", body: body};
          if (start !== '') { t.start = start[1]; }
          if (stop !== '') { t.stop = stop[3]; } else { t.stop = t.start; delete t.start; }
          if (step !== '') { t.step = step[3]; }
          if (name !== '') { t.name = name[3]; }
          if (elsebody !== '') { t.else = elsebody[5]; }
          return loc(t, [line, column]);
        }
    / "var " ws v:identifier ws ";" ws
        { matches['statement']++; return loc({ tag:"var", name:v }, [line, column]); }
    / "throw" ws expr:expression? ws ";" ws
        { matches['statement']++; return loc({ tag:"throw", expr: expr || 'Exception!' }, [line, column]); }
    / "break" ws ";" ws
        { matches['statement']++; return loc({ tag:"break" }, [line, column]); }
    / "continue" ws ";" ws
        { matches['statement']++; return loc({ tag:"continue" }, [line, column]); }
    / "return" ws expr:expression ws ";" ws
        { matches['statement']++; return loc({ tag:"return", expr: expr }, [line, column]); }
    / "try" ws
        "{" ws body:statements ws "}" ws
        "catch" ws "{" ws catchbody:statements ws "}" ws
        { matches['statement']++; return loc({ tag:"try", body:body, catch:catchbody }, [line, column]); }
    / "try" ws
        "{" ws body:statements ws "}" ws
        { matches['statement']++; return loc({ tag:"try", body:body }, [line, column]); }
    / "hatch" ws "{" ws body:statements ws "}" ws
        { matches['statement']++; return loc({tag:"hatch", body:body}, [line, column]); }
    / v:identifier ws ":=" ws expr:expression ws ";" ws
        { matches['statement']++; return loc({ tag:":=", left:v, right:expr }, [line, column]); }
    / v:identifier is:index+ ws ":=" ws expr:expression ws ";" ws
        { matches['statement']++; return loc({ tag:"[]=", left:v, index:is, right:expr }, [line, column]); }
    / expr:expression ws ";" ws
        { matches['statement']++; return loc({ tag:"ignore", body:expr }, [line, column]); }

index
  = '[' ws index:expression ws ']' ws
    { matches['index']++; return index; }

statements
    = statement*

expression
    = expr:logic_or
        { matches['expression']++; return expr; }

or_op = "||"

logic_or
    = e:logic_and !(ws op:or_op ws)
        { matches['logic_or']++; return e }
    / left:logic_and ws op:or_op ws right:logic_or
        { matches['logic_or']++; return loc({tag: op, left:left, right:right }, [line, column]); }

and_op = "&&"

logic_and
    = e:comparative !(ws op:and_op ws)
        { matches['logic_and']++; return e }
    / left:comparative ws op:and_op ws right:logic_and
        { matches['logic_and']++; return loc({tag: op, left:left, right:right }, [line, column]); }

comp_op = "<=" / ">=" / "!=" / "==" / "<" / ">"

comparative
    = e:additive !(ws op:comp_op ws)
        { matches['comparative']++; return e }
    / left:additive ws op:comp_op ws right:comparative
        { matches['comparative']++; return loc({tag: op, left:left, right:right }, [line, column]); }

additive_op = "+" / "-"

additive
    = e:multiplicative !(ws op:additive_op ws)
        { matches['additive']++; return e }
    / left:multiplicative ws op:additive_op ws right:additive
        { matches['additive']++; return loc({tag:op, left:left, right:right }, [line, column]); }

mult_op = "*" / "/"

multiplicative
    = e:primary !(ws op:mult_op ws)
        { matches['multiplicative']++; return e }
    / left:primary ws op:mult_op ws right:multiplicative
        { matches['multiplicative']++; return loc({tag:op, left:left, right:right }, [line, column]); }

primary
    = number
    / string
    / array
    / v:identifier is:index+
        { matches['primary']++; return loc({tag:"index", name:v, index:is }, [line, column]); }
    / v:identifier "(" ws ")"
        { matches['primary']++; return loc({tag:"call", name:v, args:[] }, [line, column]); }
    / v:identifier "(" ws args:arglist ws ")"
        { matches['primary']++; return loc({tag:"call", name:v, args:args }, [line, column]); }
    / v:identifier
        { matches['primary']++; return loc({tag:"ident", name:v }, [line, column]); }
    / "(" ws expression:expression ws ")"
        { matches['primary']++; return expression; }

comma_expression = "," ws expr:expression
        { matches['comma_expression']++; return expr; }

arglist
    = first:expression rest:comma_expression*
        { matches['arglist']++; return [first].concat(rest); }

comma_identifier = "," ws v:identifier
        { matches['comma_identifier']++; return v; }

ident_list
    = first:identifier rest:comma_identifier*
        { matches['ident_list']++; return [first].concat(rest); }

SourceChar
    = [\u0000-\uffff]
LineChar
    = (!(EOLChar) SourceChar)
EOLChar
    = [\u000a\u000b\u000c\u000d\u0085\u2028\u2029]
SpaceChar
    = [\u0009\u0020\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006]
CommentChar
    = '//'
Comment
    = CommentChar LineChar*

ws
    = (SpaceChar / EOLChar / Comment)*
