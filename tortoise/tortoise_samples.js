var Tortoise = Tortoise || {};
Tortoise.samples = (function () {
  var samples = {
    'simple': [[
      'hatch{repeat(4){forward(25);}}repeat(4){backward(25);}'
    ], undefined],
    'rose': [[
      'repeat(18) {',
      '  color(floor(random() * 256), floor(random() * 256), floor(random() * 256));',
      '  width(floor(random() * 7));',
      '  right(20);',
      '  repeat(36) {',
      '    forward(15);',
      '    right(10);',
      '  }',
      '}'
    ], undefined],
    'square': [[
      'define square(x) {',
      '  repeat(4) {',
      '    forward(x);',
      '    right(90);',
      '  }',
      '}',
      '',
      'square(100);',
      'square(20);'
    ], undefined],
    'spiral': [[
      'define spiral(size) {',
      '  if (size < 30) {',
      '    forward(size);',
      '    right(15);',
      '    var newsize;',
      '    newsize := size * 1.02;',
      '    spiral(newsize);',
      '  }',
      '}',
      '',
      'spiral(5);'
    ], undefined],
    'tree': [[
      'define curve(angle1, angle2, scale, size, count) {',
      '  define draw_curve(size, count) {',
      '    if (count <= 2) {',
      '      color(100, 200, 100);',
      '    } else {',
      '      color(220, 140, 80);',
      '    }',
      '    width(count);',
      '    if (count > 0) {',
      '      push();',
      '      forward(size);',
      '      left(angle1);',
      '      draw_curve(size * scale, count - 1);',
      '      right(angle2);',
      '      draw_curve(size * scale * scale, count - 1);',
      '      pop();',
      '    }',
      ' }',
      '  draw_curve(size, count);',
      '}',
      '',
      'up();',
      'left(10);',
      'backward(150);',
      'right(10);',
      'down();',
      'curve(33, 90, 0.80, 89, 8);'
    ], undefined],
    'multi-tree': [[
      'define curve(angle1, angle2, scale, size, count) {',
      '  define draw_curve(size, count) {',
      '    if (count > 0) {',
      '      if (count <= 2) {',
      '        color(100, 200, 100);',
      '      } else {',
      '        color(220, 140, 80);',
      '      }',
      '      width(count);',
      '      forward(size);',
      '      hatch {',
      '           left(angle1);',
      '           draw_curve(size * scale, count - 1);',
      '      }',
      '      hatch {',
      '           right(angle2);',
      '           draw_curve(size * scale * scale, count - 1);',
      '      }',
      '    }',
      '  }',
      '  draw_curve(size, count);',
      '}',
      '',
      'up();',
      'left(10);',
      'backward(150);',
      'right(10);',
      'down();',
      'curve(33, 57, 0.80, 89, 8);'
    ], undefined],
    'hilbert': [[
      'var size;',
      'size := 25;',
      'var c;',
      'c := 0;',
      'define hilbert (level, angle) {',
      '  if (level > 0) {',
      '    c := c + 3;',
      '    if (c > 255) {',
      '      c := 0;',
      '    }',
      '    right(angle);',
      '    hilbert(level - 1, 0-angle);',
      '    forward(size);',
      '    left(angle);',
      '    hilbert(level - 1, angle);',
      '    forward(size);',
      '    hilbert(level - 1, angle);',
      '    left(angle);',
      '    forward(size);',
      '    hilbert(level - 1, 0-angle);',
      '    right(angle);',
      '  }',
      '}',
      '',
      'up();',
      'backward(190);',
      'right(90);',
      'backward(190);',
      'left(90);',
      'down();',
      'hilbert(4, 90);',    
    ], undefined],
    'dragon': [[
      'width(1);',
      'define dragon(step, length) {',
      '  dcr(step, length);',
      '}',
      '',
      'define dcr(step, length) {',
      '  step := step - 1;',
      '  length := length / 1.41421;',
      '  if (step > 0) {',
      '    right(45);',
      '    dcr(step, length);',
      '    left(90);',
      '    dcl(step, length);',
      '    right(45);',
      '  } else {',
      '    right(45);',
      '    forward(length);',
      '    left(90);',
      '    forward(length);',
      '    right(45);',
      '  }',
      '}',
      '',
      'define dcl(step, length) {',
      '  step := step - 1;',
      '  length := length / 1.41421;',
      '  if (step > 0) {',
      '    left(45);',
      '    dcr(step, length);',
      '    right(90);',
      '    dcl(step, length);',
      '    left(45);',
      '  } else {',
      '    left(45);',
      '    forward(length);',
      '    right(90);',
      '    forward(length);',
      '    left(45);',
      '  }',
      '}',
      '',
      'up();',
      'backward(110);',
      'down();',
      'dragon(8, 250);',
    ], undefined],
    'maze': [[
      'define wall(size, length) {',
      '  var gap;',
      '  gap := floor(random() * length);',
      '  push();',
      '  down();',
      '  repeat(gap) { forward(size); }',
      '  up();',
      '  forward(size);',
      '  down();',
      '  repeat((length - gap) - 1) { forward(size); }',
      '  up();',
      '  pop();',
      '}',
      '',
      'define bisect(size, width, height) {',
      '  if (width > 1) {',
      '    if (height > 1) {',
      '      if (width >= height) {',
      '        var split;',
      '        split := floor(random() * (width - 1) + 1);',
      '        push();',
      '        right(90);',
      '        forward(size * split);',
      '        left(90);',
      '        wall(size, height);',
      '        bisect(size, width - split, height);',
      '        pop();',
      '        bisect(size, split, height);',
      '      } else {',
      '        var split;',
      '        split := floor(random() * (height - 1) + 1);',
      '        push();',
      '        forward(size * split);',
      '        right(90);',
      '        wall(size, width);',
      '        left(90);',
      '        bisect(size, width, height - split);',
      '        pop();',
      '        bisect(size, width, split);',
      '      }',
      '    }',
      '  }',
      '}',
      '',
      'define maze(size, width, height) {',
      '  repeat(2) {',
      '    up();',
      '    forward(size);',
      '    down();',
      '    forward(size * (height - 1));',
      '    right(90);',
      '    forward(size * width);',
      '    right(90);',
      '  }',
      '  up();',
      '  bisect(size, width, height);',
      '  down();',
      '}',
      '',
      'up();',
      'backward(190);',
      'right(90);',
      'backward(190);',
      'left(90);',
      '',
      'maze(38, 10, 10);',
    ], undefined],
    'multi-maze': [[
      'define wall(size, length) {',
      '  var gap;',
      '  gap := floor(random() * length);',
      '  down();',
      '  repeat(gap) { forward(size); }',
      '  up();',
      '  forward(size);',
      '  down();',
      '  repeat((length - gap) - 1) { forward(size); }',
      '  up();',
      '}',
      '',
      'define bisect(size, width, height) {',
      '  if (width > 1) {',
      '    if (height > 1) {',
      '      if (width >= height) {',
      '        var split;',
      '        split := floor(random() * (width - 1) + 1);',
      '        hatch {',
      '          bisect(size, split, height);',
      '        }',
      '        right(90);',
      '        forward(size * split);',
      '        left(90);',
      '        hatch {',
      '          wall(size, height);',
      '        }',
      '        bisect(size, width - split, height);',
      '      } else {',
      '        var split;',
      '        split := floor(random() * (height - 1) + 1);',
      '        hatch {',
      '           bisect(size, width, split);',
      '        }',
      '        forward(size * split);',
      '        hatch {',
      '          right(90);',
      '          wall(size, width);',
      '          left(90);',
      '        }',
      '        bisect(size, width, height - split);',
      '      }',
      '    }',
      '  }',
      '}',
      '',
      'define maze(size, width, height) {',
      '  repeat(2) {',
      '    up();',
      '    forward(size);',
      '    down();',
      '    repeat (height-1) { forward(size); }',
      '    right(90);',
      '    repeat (width) { forward(size); }',
      '    right(90);',
      '  }',
      '  up();',
      '  bisect(size, width, height);',
      '  down();',
      '}',
      '',
      'up();',
      'backward(190);',
      'right(90);',
      'backward(190);',
      'left(90);',
      '',
      'maze(38, 10, 10);',
    ], undefined],
    'tron': [[
      'var grid;',
      'grid := [',
      '  [0,0,0,0,0,0,0,0,0,0],',
      '  [0,0,0,0,0,0,0,0,0,0],',
      '  [0,0,0,0,0,0,0,0,0,0],',
      '  [0,0,0,0,0,0,0,0,0,0],',
      '  [0,0,0,0,0,0,0,0,0,0],',
      '  [0,0,0,0,0,1,0,0,0,0],',
      '  [0,0,0,0,0,0,0,0,0,0],',
      '  [0,0,0,0,0,0,0,0,0,0],',
      '  [0,0,0,0,0,0,0,0,0,0],',
      '  [0,0,0,0,0,0,0,0,0,0]];',
      '',
      'define rand_int(min, max) {',
      '  floor(random() * ((max - min) + 1)) + min;',
      '}',
      '',
      'var n;',
      'n := [',
      '  [[0,-1,3], [-1,0,0], [0,1,2]],',
      '  [[0,1,2],  [1,0,1],  [0,-1,3]],',
      '  [[-1,0,0], [0,1,2],  [1,0,1]],',
      '  [[1,0,1],  [0,-1,3], [-1,0,0]]',
      '];',
      'define next_space(loc, tries) {',
      '  var turn;',
      '  var d;',
      '  var x;',
      '  var y;',
      '  turn := rand_int(0, 2);',
      '  d := n[loc[2]][turn];',
      '  x := d[0] + loc[0];',
      '  y := d[1] + loc[1];',
      '  if (x >= 0 &&',
      '      x < 10 &&',
      '      y >= 0 &&',
      '      y < 10 &&',
      '      (tries <= 0 || grid[x][y] == 0)) {',
      '    [d[0] + loc[0], d[1] + loc[1], d[2], (turn - 1) * 90];',
      '  } else {',
      '    next_space(loc, tries - 1);',
      '  }',
      '}',
      '',
      'define move(loc) {',
      '  var new_loc;',
      '  new_loc := next_space(loc, 3);',
      '  right(new_loc[3]);',
      '  forward(40);',
      '  if (grid[new_loc[0]][new_loc[1]] == 1) {',
      '    throw "crash";',
      '  } else {',
      '    grid[new_loc[0]][new_loc[1]] := 1;',
      '    move(new_loc);',
      '  }',
      '}',
      '',
      'width(30);',
      '',
      'hatch {',
      '  up();',
      '  backward(180);',
      '  right(90);',
      '  backward(180);',
      '  left(90);',
      '  color(0, 0, 255);',
      '  down();',
      '  move([0, 0, 2, 0]);',
      '}',
      '',
      'up();',
      'forward(180);',
      'right(90);',
      'forward(180);',
      'right(90);',
      'color(255, 0, 0);',
      'down();',
      'move([9,9,3,180]);'
    ], undefined]
  };
  for (var name in samples) { if (samples.hasOwnProperty(name)) {
    samples[name][0] = samples[name][0].join('\n');
  }}
  return samples;
}());
if (typeof module !== "undefined") { module.exports = Tortoise.samples; }