var Tortoise = Tortoise || {};
Tortoise.parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "number_frac": parse_number_frac,
        "number": parse_number,
        "string": parse_string,
        "s_char": parse_s_char,
        "d_char": parse_d_char,
        "escape": parse_escape,
        "single_escape_char": parse_single_escape_char,
        "non_escape_char": parse_non_escape_char,
        "hex_escape": parse_hex_escape,
        "unicode_escape": parse_unicode_escape,
        "hex": parse_hex,
        "array": parse_array,
        "validfirstchar": parse_validfirstchar,
        "validchar": parse_validchar,
        "identifier": parse_identifier,
        "statement": parse_statement,
        "index": parse_index,
        "statements": parse_statements,
        "expression": parse_expression,
        "or_op": parse_or_op,
        "logic_or": parse_logic_or,
        "and_op": parse_and_op,
        "logic_and": parse_logic_and,
        "comp_op": parse_comp_op,
        "comparative": parse_comparative,
        "additive_op": parse_additive_op,
        "additive": parse_additive,
        "mult_op": parse_mult_op,
        "multiplicative": parse_multiplicative,
        "primary": parse_primary,
        "comma_expression": parse_comma_expression,
        "arglist": parse_arglist,
        "comma_identifier": parse_comma_identifier,
        "ident_list": parse_ident_list,
        "SourceChar": parse_SourceChar,
        "LineChar": parse_LineChar,
        "EOLChar": parse_EOLChar,
        "SpaceChar": parse_SpaceChar,
        "CommentChar": parse_CommentChar,
        "Comment": parse_Comment,
        "ws": parse_ws
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ws();
        if (result0 !== null) {
          result1 = parse_statements();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, seq) { return seq;
                  matches['start']++;
                  for (var prop in matches) {
                    if (!matches[prop]) {
                      delete matches[prop];
                    }
                  }
                  return {matches: matches, seq: seq}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_number_frac() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) { matches['number_frac']++; return "." + chars.join(''); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_number() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_number_frac();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars, frac) { matches['number']++; return parseFloat(chars.join('') + frac); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 45) {
            result0 = "-";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 !== null) {
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_number_frac();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, chars, frac) { matches['number']++; return -parseFloat(chars.join('') + frac); })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_string() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_s_char();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_s_char();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 39) {
              result2 = "'";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) { matches['string']++; return chars.join(''); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 34) {
            result0 = "\"";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_d_char();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_d_char();
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 34) {
                result2 = "\"";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, chars) { matches['string']++; return chars.join(''); })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_s_char() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 92) {
            result0 = "\\";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 === null) {
            result0 = parse_EOLChar();
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          result1 = parse_SourceChar();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, char) { return char; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 92) {
            result0 = "\\";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_escape();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, char) { return JSON.parse('"\\' + char + '"'); })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_d_char() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 92) {
            result0 = "\\";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 === null) {
            result0 = parse_EOLChar();
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          result1 = parse_SourceChar();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, char) { return char; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 92) {
            result0 = "\\";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_escape();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, char) { return JSON.parse('"\\' + char + '"'); })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_escape() {
        var result0, result1;
        var pos0, pos1;
        
        result0 = parse_single_escape_char();
        if (result0 === null) {
          result0 = parse_non_escape_char();
          if (result0 === null) {
            pos0 = clone(pos);
            if (input.charCodeAt(pos.offset) === 48) {
              result0 = "0";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result1 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_hex_escape();
              if (result0 === null) {
                result0 = parse_unicode_escape();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_single_escape_char() {
        var result0;
        
        if (/^['"\\bfnrtv]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("['\"\\\\bfnrtv]");
          }
        }
        return result0;
      }
      
      function parse_non_escape_char() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        result0 = parse_single_escape_char();
        if (result0 === null) {
          if (/^[0-9ux]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9ux]");
            }
          }
          if (result0 === null) {
            result0 = parse_EOLChar();
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_SourceChar();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_hex_escape() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 120) {
          result0 = "x";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"x\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_hex();
          if (result1 !== null) {
            result2 = parse_hex();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, d1, d2) { return 'x' + d1 + d2; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_unicode_escape() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 117) {
          result0 = "u";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"u\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_hex();
          if (result1 !== null) {
            result2 = parse_hex();
            if (result2 !== null) {
              result3 = parse_hex();
              if (result3 !== null) {
                result4 = parse_hex();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, d1, d2, d3, d4) { return 'u' + d1 + d2 + d3 + d4; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_hex() {
        var result0;
        
        if (/^[0-9a-fA-F]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-fA-F]");
          }
        }
        return result0;
      }
      
      function parse_array() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ws();
          if (result1 !== null) {
            result2 = parse_arglist();
            if (result2 !== null) {
              result3 = parse_ws();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 93) {
                  result4 = "]";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, values) { matches['array']++; return values; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_validfirstchar() {
        var result0;
        
        if (/^[a-zA-Z_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z_]");
          }
        }
        return result0;
      }
      
      function parse_validchar() {
        var result0;
        
        if (/^[0-9a-zA-Z_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-zA-Z_]");
          }
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_validfirstchar();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_validchar();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_validchar();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, firstchar, chars) { matches['identifier']++; return firstchar + chars.join(''); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_statement() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "if") {
          result0 = "if";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"if\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ws();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 40) {
              result2 = "(";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_ws();
              if (result3 !== null) {
                result4 = parse_expression();
                if (result4 !== null) {
                  result5 = parse_ws();
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 41) {
                      result6 = ")";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse_ws();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 123) {
                          result8 = "{";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"{\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = parse_ws();
                          if (result9 !== null) {
                            result10 = parse_statements();
                            if (result10 !== null) {
                              result11 = parse_ws();
                              if (result11 !== null) {
                                if (input.charCodeAt(pos.offset) === 125) {
                                  result12 = "}";
                                  advance(pos, 1);
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"}\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result13 = parse_ws();
                                  if (result13 !== null) {
                                    if (input.substr(pos.offset, 4) === "else") {
                                      result14 = "else";
                                      advance(pos, 4);
                                    } else {
                                      result14 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"else\"");
                                      }
                                    }
                                    if (result14 !== null) {
                                      result15 = parse_ws();
                                      if (result15 !== null) {
                                        if (input.charCodeAt(pos.offset) === 123) {
                                          result16 = "{";
                                          advance(pos, 1);
                                        } else {
                                          result16 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"{\"");
                                          }
                                        }
                                        if (result16 !== null) {
                                          result17 = parse_ws();
                                          if (result17 !== null) {
                                            result18 = parse_statements();
                                            if (result18 !== null) {
                                              result19 = parse_ws();
                                              if (result19 !== null) {
                                                if (input.charCodeAt(pos.offset) === 125) {
                                                  result20 = "}";
                                                  advance(pos, 1);
                                                } else {
                                                  result20 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"}\"");
                                                  }
                                                }
                                                if (result20 !== null) {
                                                  result21 = parse_ws();
                                                  if (result21 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21];
                                                  } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = clone(pos1);
                                                }
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, expr, body, elsebody) { matches['statement']++; return loc({ tag:"if", expr:expr, body:body, else:elsebody }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[4], result0[10], result0[18]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "if") {
            result0 = "if";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"if\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_ws();
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 40) {
                result2 = "(";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_ws();
                if (result3 !== null) {
                  result4 = parse_expression();
                  if (result4 !== null) {
                    result5 = parse_ws();
                    if (result5 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result6 = ")";
                        advance(pos, 1);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result6 !== null) {
                        result7 = parse_ws();
                        if (result7 !== null) {
                          if (input.charCodeAt(pos.offset) === 123) {
                            result8 = "{";
                            advance(pos, 1);
                          } else {
                            result8 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"{\"");
                            }
                          }
                          if (result8 !== null) {
                            result9 = parse_ws();
                            if (result9 !== null) {
                              result10 = parse_statements();
                              if (result10 !== null) {
                                result11 = parse_ws();
                                if (result11 !== null) {
                                  if (input.charCodeAt(pos.offset) === 125) {
                                    result12 = "}";
                                    advance(pos, 1);
                                  } else {
                                    result12 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"}\"");
                                    }
                                  }
                                  if (result12 !== null) {
                                    result13 = parse_ws();
                                    if (result13 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, expr, body) { matches['statement']++; return loc({ tag:"if", expr:expr, body:body }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[4], result0[10]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 7) === "define ") {
              result0 = "define ";
              advance(pos, 7);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"define \"");
              }
            }
            if (result0 !== null) {
              result1 = parse_ws();
              if (result1 !== null) {
                result2 = parse_identifier();
                if (result2 !== null) {
                  result3 = parse_ws();
                  if (result3 !== null) {
                    if (input.charCodeAt(pos.offset) === 40) {
                      result4 = "(";
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse_ws();
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result6 = ")";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse_ws();
                          if (result7 !== null) {
                            if (input.charCodeAt(pos.offset) === 123) {
                              result8 = "{";
                              advance(pos, 1);
                            } else {
                              result8 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{\"");
                              }
                            }
                            if (result8 !== null) {
                              result9 = parse_ws();
                              if (result9 !== null) {
                                result10 = parse_statements();
                                if (result10 !== null) {
                                  result11 = parse_ws();
                                  if (result11 !== null) {
                                    if (input.charCodeAt(pos.offset) === 125) {
                                      result12 = "}";
                                      advance(pos, 1);
                                    } else {
                                      result12 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"}\"");
                                      }
                                    }
                                    if (result12 !== null) {
                                      result13 = parse_ws();
                                      if (result13 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, v, body) { matches['statement']++; return loc({ tag:"define", name:v, args:[], body:body }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[10]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 7) === "define ") {
                result0 = "define ";
                advance(pos, 7);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"define \"");
                }
              }
              if (result0 !== null) {
                result1 = parse_ws();
                if (result1 !== null) {
                  result2 = parse_identifier();
                  if (result2 !== null) {
                    result3 = parse_ws();
                    if (result3 !== null) {
                      if (input.charCodeAt(pos.offset) === 40) {
                        result4 = "(";
                        advance(pos, 1);
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result4 !== null) {
                        result5 = parse_ws();
                        if (result5 !== null) {
                          result6 = parse_ident_list();
                          if (result6 !== null) {
                            result7 = parse_ws();
                            if (result7 !== null) {
                              if (input.charCodeAt(pos.offset) === 41) {
                                result8 = ")";
                                advance(pos, 1);
                              } else {
                                result8 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result8 !== null) {
                                result9 = parse_ws();
                                if (result9 !== null) {
                                  if (input.charCodeAt(pos.offset) === 123) {
                                    result10 = "{";
                                    advance(pos, 1);
                                  } else {
                                    result10 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"{\"");
                                    }
                                  }
                                  if (result10 !== null) {
                                    result11 = parse_ws();
                                    if (result11 !== null) {
                                      result12 = parse_statements();
                                      if (result12 !== null) {
                                        result13 = parse_ws();
                                        if (result13 !== null) {
                                          if (input.charCodeAt(pos.offset) === 125) {
                                            result14 = "}";
                                            advance(pos, 1);
                                          } else {
                                            result14 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"}\"");
                                            }
                                          }
                                          if (result14 !== null) {
                                            result15 = parse_ws();
                                            if (result15 !== null) {
                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, v, args, body) { matches['statement']++; return loc({ tag:"define", name:v, args:args, body:body }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6], result0[12]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 6) === "repeat") {
                  result0 = "repeat";
                  advance(pos, 6);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"repeat\"");
                  }
                }
                if (result0 !== null) {
                  pos2 = clone(pos);
                  result1 = parse_ws();
                  if (result1 !== null) {
                    result2 = parse_expression();
                    if (result2 !== null) {
                      result1 = [result1, result2];
                    } else {
                      result1 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result1 = null;
                    pos = clone(pos2);
                  }
                  result1 = result1 !== null ? result1 : "";
                  if (result1 !== null) {
                    pos2 = clone(pos);
                    result2 = parse_ws();
                    if (result2 !== null) {
                      if (input.substr(pos.offset, 2) === "to") {
                        result3 = "to";
                        advance(pos, 2);
                      } else {
                        result3 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"to\"");
                        }
                      }
                      if (result3 !== null) {
                        result4 = parse_ws();
                        if (result4 !== null) {
                          result5 = parse_expression();
                          if (result5 !== null) {
                            result2 = [result2, result3, result4, result5];
                          } else {
                            result2 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result2 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                    result2 = result2 !== null ? result2 : "";
                    if (result2 !== null) {
                      pos2 = clone(pos);
                      result3 = parse_ws();
                      if (result3 !== null) {
                        if (input.substr(pos.offset, 2) === "by") {
                          result4 = "by";
                          advance(pos, 2);
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"by\"");
                          }
                        }
                        if (result4 !== null) {
                          result5 = parse_ws();
                          if (result5 !== null) {
                            result6 = parse_expression();
                            if (result6 !== null) {
                              result3 = [result3, result4, result5, result6];
                            } else {
                              result3 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result3 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result3 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result3 = null;
                        pos = clone(pos2);
                      }
                      result3 = result3 !== null ? result3 : "";
                      if (result3 !== null) {
                        pos2 = clone(pos);
                        result4 = parse_ws();
                        if (result4 !== null) {
                          if (input.substr(pos.offset, 2) === "as") {
                            result5 = "as";
                            advance(pos, 2);
                          } else {
                            result5 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"as\"");
                            }
                          }
                          if (result5 !== null) {
                            result6 = parse_ws();
                            if (result6 !== null) {
                              result7 = parse_identifier();
                              if (result7 !== null) {
                                result4 = [result4, result5, result6, result7];
                              } else {
                                result4 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result4 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result4 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result4 = null;
                          pos = clone(pos2);
                        }
                        result4 = result4 !== null ? result4 : "";
                        if (result4 !== null) {
                          result5 = parse_ws();
                          if (result5 !== null) {
                            if (input.charCodeAt(pos.offset) === 123) {
                              result6 = "{";
                              advance(pos, 1);
                            } else {
                              result6 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{\"");
                              }
                            }
                            if (result6 !== null) {
                              result7 = parse_ws();
                              if (result7 !== null) {
                                result8 = parse_statements();
                                if (result8 !== null) {
                                  result9 = parse_ws();
                                  if (result9 !== null) {
                                    if (input.charCodeAt(pos.offset) === 125) {
                                      result10 = "}";
                                      advance(pos, 1);
                                    } else {
                                      result10 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"}\"");
                                      }
                                    }
                                    if (result10 !== null) {
                                      pos2 = clone(pos);
                                      result11 = parse_ws();
                                      if (result11 !== null) {
                                        if (input.substr(pos.offset, 4) === "else") {
                                          result12 = "else";
                                          advance(pos, 4);
                                        } else {
                                          result12 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"else\"");
                                          }
                                        }
                                        if (result12 !== null) {
                                          result13 = parse_ws();
                                          if (result13 !== null) {
                                            if (input.charCodeAt(pos.offset) === 123) {
                                              result14 = "{";
                                              advance(pos, 1);
                                            } else {
                                              result14 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"{\"");
                                              }
                                            }
                                            if (result14 !== null) {
                                              result15 = parse_ws();
                                              if (result15 !== null) {
                                                result16 = parse_statements();
                                                if (result16 !== null) {
                                                  result17 = parse_ws();
                                                  if (result17 !== null) {
                                                    if (input.charCodeAt(pos.offset) === 125) {
                                                      result18 = "}";
                                                      advance(pos, 1);
                                                    } else {
                                                      result18 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"}\"");
                                                      }
                                                    }
                                                    if (result18 !== null) {
                                                      result11 = [result11, result12, result13, result14, result15, result16, result17, result18];
                                                    } else {
                                                      result11 = null;
                                                      pos = clone(pos2);
                                                    }
                                                  } else {
                                                    result11 = null;
                                                    pos = clone(pos2);
                                                  }
                                                } else {
                                                  result11 = null;
                                                  pos = clone(pos2);
                                                }
                                              } else {
                                                result11 = null;
                                                pos = clone(pos2);
                                              }
                                            } else {
                                              result11 = null;
                                              pos = clone(pos2);
                                            }
                                          } else {
                                            result11 = null;
                                            pos = clone(pos2);
                                          }
                                        } else {
                                          result11 = null;
                                          pos = clone(pos2);
                                        }
                                      } else {
                                        result11 = null;
                                        pos = clone(pos2);
                                      }
                                      result11 = result11 !== null ? result11 : "";
                                      if (result11 !== null) {
                                        result12 = parse_ws();
                                        if (result12 !== null) {
                                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, start, stop, step, name, body, elsebody) {
                          var t = {tag:"repeat", body: body};
                          if (start !== '') { t.start = start[1]; }
                          if (stop !== '') { t.stop = stop[3]; } else { t.stop = t.start; delete t.start; }
                          if (step !== '') { t.step = step[3]; }
                          if (name !== '') { t.name = name[3]; }
                          if (elsebody !== '') { t.else = elsebody[5]; }
                          return loc(t, [line, column]);
                        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3], result0[4], result0[8], result0[11]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  if (input.substr(pos.offset, 4) === "var ") {
                    result0 = "var ";
                    advance(pos, 4);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"var \"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                      result2 = parse_identifier();
                      if (result2 !== null) {
                        result3 = parse_ws();
                        if (result3 !== null) {
                          if (input.charCodeAt(pos.offset) === 59) {
                            result4 = ";";
                            advance(pos, 1);
                          } else {
                            result4 = null;
                            if (reportFailures === 0) {
                              matchFailed("\";\"");
                            }
                          }
                          if (result4 !== null) {
                            result5 = parse_ws();
                            if (result5 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, v) { matches['statement']++; return loc({ tag:"var", name:v }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[2]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    if (input.substr(pos.offset, 5) === "throw") {
                      result0 = "throw";
                      advance(pos, 5);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"throw\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse_ws();
                      if (result1 !== null) {
                        result2 = parse_expression();
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                          result3 = parse_ws();
                          if (result3 !== null) {
                            if (input.charCodeAt(pos.offset) === 59) {
                              result4 = ";";
                              advance(pos, 1);
                            } else {
                              result4 = null;
                              if (reportFailures === 0) {
                                matchFailed("\";\"");
                              }
                            }
                            if (result4 !== null) {
                              result5 = parse_ws();
                              if (result5 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, expr) { matches['statement']++; return loc({ tag:"throw", expr: expr || 'Exception!' }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[2]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      if (input.substr(pos.offset, 5) === "break") {
                        result0 = "break";
                        advance(pos, 5);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"break\"");
                        }
                      }
                      if (result0 !== null) {
                        result1 = parse_ws();
                        if (result1 !== null) {
                          if (input.charCodeAt(pos.offset) === 59) {
                            result2 = ";";
                            advance(pos, 1);
                          } else {
                            result2 = null;
                            if (reportFailures === 0) {
                              matchFailed("\";\"");
                            }
                          }
                          if (result2 !== null) {
                            result3 = parse_ws();
                            if (result3 !== null) {
                              result0 = [result0, result1, result2, result3];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column) { matches['statement']++; return loc({ tag:"break" }, [line, column]); })(pos0.offset, pos0.line, pos0.column);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                      if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        if (input.substr(pos.offset, 8) === "continue") {
                          result0 = "continue";
                          advance(pos, 8);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"continue\"");
                          }
                        }
                        if (result0 !== null) {
                          result1 = parse_ws();
                          if (result1 !== null) {
                            if (input.charCodeAt(pos.offset) === 59) {
                              result2 = ";";
                              advance(pos, 1);
                            } else {
                              result2 = null;
                              if (reportFailures === 0) {
                                matchFailed("\";\"");
                              }
                            }
                            if (result2 !== null) {
                              result3 = parse_ws();
                              if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, line, column) { matches['statement']++; return loc({ tag:"continue" }, [line, column]); })(pos0.offset, pos0.line, pos0.column);
                        }
                        if (result0 === null) {
                          pos = clone(pos0);
                        }
                        if (result0 === null) {
                          pos0 = clone(pos);
                          pos1 = clone(pos);
                          if (input.substr(pos.offset, 6) === "return") {
                            result0 = "return";
                            advance(pos, 6);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"return\"");
                            }
                          }
                          if (result0 !== null) {
                            result1 = parse_ws();
                            if (result1 !== null) {
                              result2 = parse_expression();
                              if (result2 !== null) {
                                result3 = parse_ws();
                                if (result3 !== null) {
                                  if (input.charCodeAt(pos.offset) === 59) {
                                    result4 = ";";
                                    advance(pos, 1);
                                  } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\";\"");
                                    }
                                  }
                                  if (result4 !== null) {
                                    result5 = parse_ws();
                                    if (result5 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, line, column, expr) { matches['statement']++; return loc({ tag:"return", expr: expr }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[2]);
                          }
                          if (result0 === null) {
                            pos = clone(pos0);
                          }
                          if (result0 === null) {
                            pos0 = clone(pos);
                            pos1 = clone(pos);
                            if (input.substr(pos.offset, 3) === "try") {
                              result0 = "try";
                              advance(pos, 3);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"try\"");
                              }
                            }
                            if (result0 !== null) {
                              result1 = parse_ws();
                              if (result1 !== null) {
                                if (input.charCodeAt(pos.offset) === 123) {
                                  result2 = "{";
                                  advance(pos, 1);
                                } else {
                                  result2 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"{\"");
                                  }
                                }
                                if (result2 !== null) {
                                  result3 = parse_ws();
                                  if (result3 !== null) {
                                    result4 = parse_statements();
                                    if (result4 !== null) {
                                      result5 = parse_ws();
                                      if (result5 !== null) {
                                        if (input.charCodeAt(pos.offset) === 125) {
                                          result6 = "}";
                                          advance(pos, 1);
                                        } else {
                                          result6 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"}\"");
                                          }
                                        }
                                        if (result6 !== null) {
                                          result7 = parse_ws();
                                          if (result7 !== null) {
                                            if (input.substr(pos.offset, 5) === "catch") {
                                              result8 = "catch";
                                              advance(pos, 5);
                                            } else {
                                              result8 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"catch\"");
                                              }
                                            }
                                            if (result8 !== null) {
                                              result9 = parse_ws();
                                              if (result9 !== null) {
                                                if (input.charCodeAt(pos.offset) === 123) {
                                                  result10 = "{";
                                                  advance(pos, 1);
                                                } else {
                                                  result10 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"{\"");
                                                  }
                                                }
                                                if (result10 !== null) {
                                                  result11 = parse_ws();
                                                  if (result11 !== null) {
                                                    result12 = parse_statements();
                                                    if (result12 !== null) {
                                                      result13 = parse_ws();
                                                      if (result13 !== null) {
                                                        if (input.charCodeAt(pos.offset) === 125) {
                                                          result14 = "}";
                                                          advance(pos, 1);
                                                        } else {
                                                          result14 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"}\"");
                                                          }
                                                        }
                                                        if (result14 !== null) {
                                                          result15 = parse_ws();
                                                          if (result15 !== null) {
                                                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                                          } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = clone(pos1);
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = clone(pos1);
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = clone(pos1);
                                                }
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, line, column, body, catchbody) { matches['statement']++; return loc({ tag:"try", body:body, catch:catchbody }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[4], result0[12]);
                            }
                            if (result0 === null) {
                              pos = clone(pos0);
                            }
                            if (result0 === null) {
                              pos0 = clone(pos);
                              pos1 = clone(pos);
                              if (input.substr(pos.offset, 3) === "try") {
                                result0 = "try";
                                advance(pos, 3);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"try\"");
                                }
                              }
                              if (result0 !== null) {
                                result1 = parse_ws();
                                if (result1 !== null) {
                                  if (input.charCodeAt(pos.offset) === 123) {
                                    result2 = "{";
                                    advance(pos, 1);
                                  } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"{\"");
                                    }
                                  }
                                  if (result2 !== null) {
                                    result3 = parse_ws();
                                    if (result3 !== null) {
                                      result4 = parse_statements();
                                      if (result4 !== null) {
                                        result5 = parse_ws();
                                        if (result5 !== null) {
                                          if (input.charCodeAt(pos.offset) === 125) {
                                            result6 = "}";
                                            advance(pos, 1);
                                          } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"}\"");
                                            }
                                          }
                                          if (result6 !== null) {
                                            result7 = parse_ws();
                                            if (result7 !== null) {
                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, line, column, body) { matches['statement']++; return loc({ tag:"try", body:body }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[4]);
                              }
                              if (result0 === null) {
                                pos = clone(pos0);
                              }
                              if (result0 === null) {
                                pos0 = clone(pos);
                                pos1 = clone(pos);
                                if (input.substr(pos.offset, 5) === "hatch") {
                                  result0 = "hatch";
                                  advance(pos, 5);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"hatch\"");
                                  }
                                }
                                if (result0 !== null) {
                                  result1 = parse_ws();
                                  if (result1 !== null) {
                                    if (input.charCodeAt(pos.offset) === 123) {
                                      result2 = "{";
                                      advance(pos, 1);
                                    } else {
                                      result2 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"{\"");
                                      }
                                    }
                                    if (result2 !== null) {
                                      result3 = parse_ws();
                                      if (result3 !== null) {
                                        result4 = parse_statements();
                                        if (result4 !== null) {
                                          result5 = parse_ws();
                                          if (result5 !== null) {
                                            if (input.charCodeAt(pos.offset) === 125) {
                                              result6 = "}";
                                              advance(pos, 1);
                                            } else {
                                              result6 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"}\"");
                                              }
                                            }
                                            if (result6 !== null) {
                                              result7 = parse_ws();
                                              if (result7 !== null) {
                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset, line, column, body) { matches['statement']++; return loc({tag:"hatch", body:body}, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[4]);
                                }
                                if (result0 === null) {
                                  pos = clone(pos0);
                                }
                                if (result0 === null) {
                                  pos0 = clone(pos);
                                  pos1 = clone(pos);
                                  result0 = parse_identifier();
                                  if (result0 !== null) {
                                    result1 = parse_ws();
                                    if (result1 !== null) {
                                      if (input.substr(pos.offset, 2) === ":=") {
                                        result2 = ":=";
                                        advance(pos, 2);
                                      } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\":=\"");
                                        }
                                      }
                                      if (result2 !== null) {
                                        result3 = parse_ws();
                                        if (result3 !== null) {
                                          result4 = parse_expression();
                                          if (result4 !== null) {
                                            result5 = parse_ws();
                                            if (result5 !== null) {
                                              if (input.charCodeAt(pos.offset) === 59) {
                                                result6 = ";";
                                                advance(pos, 1);
                                              } else {
                                                result6 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\";\"");
                                                }
                                              }
                                              if (result6 !== null) {
                                                result7 = parse_ws();
                                                if (result7 !== null) {
                                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                                } else {
                                                  result0 = null;
                                                  pos = clone(pos1);
                                                }
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset, line, column, v, expr) { matches['statement']++; return loc({ tag:":=", left:v, right:expr }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
                                  }
                                  if (result0 === null) {
                                    pos = clone(pos0);
                                  }
                                  if (result0 === null) {
                                    pos0 = clone(pos);
                                    pos1 = clone(pos);
                                    result0 = parse_identifier();
                                    if (result0 !== null) {
                                      result2 = parse_index();
                                      if (result2 !== null) {
                                        result1 = [];
                                        while (result2 !== null) {
                                          result1.push(result2);
                                          result2 = parse_index();
                                        }
                                      } else {
                                        result1 = null;
                                      }
                                      if (result1 !== null) {
                                        result2 = parse_ws();
                                        if (result2 !== null) {
                                          if (input.substr(pos.offset, 2) === ":=") {
                                            result3 = ":=";
                                            advance(pos, 2);
                                          } else {
                                            result3 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\":=\"");
                                            }
                                          }
                                          if (result3 !== null) {
                                            result4 = parse_ws();
                                            if (result4 !== null) {
                                              result5 = parse_expression();
                                              if (result5 !== null) {
                                                result6 = parse_ws();
                                                if (result6 !== null) {
                                                  if (input.charCodeAt(pos.offset) === 59) {
                                                    result7 = ";";
                                                    advance(pos, 1);
                                                  } else {
                                                    result7 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\";\"");
                                                    }
                                                  }
                                                  if (result7 !== null) {
                                                    result8 = parse_ws();
                                                    if (result8 !== null) {
                                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                                    } else {
                                                      result0 = null;
                                                      pos = clone(pos1);
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = clone(pos1);
                                                }
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                    if (result0 !== null) {
                                      result0 = (function(offset, line, column, v, is, expr) { matches['statement']++; return loc({ tag:"[]=", left:v, index:is, right:expr }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[5]);
                                    }
                                    if (result0 === null) {
                                      pos = clone(pos0);
                                    }
                                    if (result0 === null) {
                                      pos0 = clone(pos);
                                      pos1 = clone(pos);
                                      result0 = parse_expression();
                                      if (result0 !== null) {
                                        result1 = parse_ws();
                                        if (result1 !== null) {
                                          if (input.charCodeAt(pos.offset) === 59) {
                                            result2 = ";";
                                            advance(pos, 1);
                                          } else {
                                            result2 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\";\"");
                                            }
                                          }
                                          if (result2 !== null) {
                                            result3 = parse_ws();
                                            if (result3 !== null) {
                                              result0 = [result0, result1, result2, result3];
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                      if (result0 !== null) {
                                        result0 = (function(offset, line, column, expr) { matches['statement']++; return loc({ tag:"ignore", body:expr }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0]);
                                      }
                                      if (result0 === null) {
                                        pos = clone(pos0);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_index() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ws();
          if (result1 !== null) {
            result2 = parse_expression();
            if (result2 !== null) {
              result3 = parse_ws();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 93) {
                  result4 = "]";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_ws();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, index) { matches['index']++; return index; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_statements() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_statement();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_statement();
        }
        return result0;
      }
      
      function parse_expression() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_logic_or();
        if (result0 !== null) {
          result0 = (function(offset, line, column, expr) { matches['expression']++; return expr; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_or_op() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "||") {
          result0 = "||";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"||\"");
          }
        }
        return result0;
      }
      
      function parse_logic_or() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_logic_and();
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          pos3 = clone(pos);
          result1 = parse_ws();
          if (result1 !== null) {
            result2 = parse_or_op();
            if (result2 !== null) {
              result3 = parse_ws();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos3);
              }
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, e) { matches['logic_or']++; return e })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_logic_and();
          if (result0 !== null) {
            result1 = parse_ws();
            if (result1 !== null) {
              result2 = parse_or_op();
              if (result2 !== null) {
                result3 = parse_ws();
                if (result3 !== null) {
                  result4 = parse_logic_or();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, left, op, right) { matches['logic_or']++; return loc({tag: op, left:left, right:right }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_and_op() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "&&") {
          result0 = "&&";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"&&\"");
          }
        }
        return result0;
      }
      
      function parse_logic_and() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_comparative();
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          pos3 = clone(pos);
          result1 = parse_ws();
          if (result1 !== null) {
            result2 = parse_and_op();
            if (result2 !== null) {
              result3 = parse_ws();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos3);
              }
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, e) { matches['logic_and']++; return e })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_comparative();
          if (result0 !== null) {
            result1 = parse_ws();
            if (result1 !== null) {
              result2 = parse_and_op();
              if (result2 !== null) {
                result3 = parse_ws();
                if (result3 !== null) {
                  result4 = parse_logic_and();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, left, op, right) { matches['logic_and']++; return loc({tag: op, left:left, right:right }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_comp_op() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "<=") {
          result0 = "<=";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<=\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === ">=") {
            result0 = ">=";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\">=\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2) === "!=") {
              result0 = "!=";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"!=\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "==") {
                result0 = "==";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"==\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 60) {
                  result0 = "<";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"<\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 62) {
                    result0 = ">";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">\"");
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_comparative() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_additive();
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          pos3 = clone(pos);
          result1 = parse_ws();
          if (result1 !== null) {
            result2 = parse_comp_op();
            if (result2 !== null) {
              result3 = parse_ws();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos3);
              }
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, e) { matches['comparative']++; return e })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_additive();
          if (result0 !== null) {
            result1 = parse_ws();
            if (result1 !== null) {
              result2 = parse_comp_op();
              if (result2 !== null) {
                result3 = parse_ws();
                if (result3 !== null) {
                  result4 = parse_comparative();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, left, op, right) { matches['comparative']++; return loc({tag: op, left:left, right:right }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_additive_op() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 43) {
          result0 = "+";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 45) {
            result0 = "-";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
        }
        return result0;
      }
      
      function parse_additive() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_multiplicative();
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          pos3 = clone(pos);
          result1 = parse_ws();
          if (result1 !== null) {
            result2 = parse_additive_op();
            if (result2 !== null) {
              result3 = parse_ws();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos3);
              }
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, e) { matches['additive']++; return e })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_multiplicative();
          if (result0 !== null) {
            result1 = parse_ws();
            if (result1 !== null) {
              result2 = parse_additive_op();
              if (result2 !== null) {
                result3 = parse_ws();
                if (result3 !== null) {
                  result4 = parse_additive();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, left, op, right) { matches['additive']++; return loc({tag:op, left:left, right:right }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_mult_op() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 42) {
          result0 = "*";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 47) {
            result0 = "/";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
        }
        return result0;
      }
      
      function parse_multiplicative() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_primary();
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          pos3 = clone(pos);
          result1 = parse_ws();
          if (result1 !== null) {
            result2 = parse_mult_op();
            if (result2 !== null) {
              result3 = parse_ws();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos3);
              }
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, e) { matches['multiplicative']++; return e })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_primary();
          if (result0 !== null) {
            result1 = parse_ws();
            if (result1 !== null) {
              result2 = parse_mult_op();
              if (result2 !== null) {
                result3 = parse_ws();
                if (result3 !== null) {
                  result4 = parse_multiplicative();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, left, op, right) { matches['multiplicative']++; return loc({tag:op, left:left, right:right }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_primary() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        result0 = parse_number();
        if (result0 === null) {
          result0 = parse_string();
          if (result0 === null) {
            result0 = parse_array();
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_identifier();
              if (result0 !== null) {
                result2 = parse_index();
                if (result2 !== null) {
                  result1 = [];
                  while (result2 !== null) {
                    result1.push(result2);
                    result2 = parse_index();
                  }
                } else {
                  result1 = null;
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, v, is) { matches['primary']++; return loc({tag:"index", name:v, index:is }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_identifier();
                if (result0 !== null) {
                  if (input.charCodeAt(pos.offset) === 40) {
                    result1 = "(";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result1 !== null) {
                    result2 = parse_ws();
                    if (result2 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result3 = ")";
                        advance(pos, 1);
                      } else {
                        result3 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, v) { matches['primary']++; return loc({tag:"call", name:v, args:[] }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  result0 = parse_identifier();
                  if (result0 !== null) {
                    if (input.charCodeAt(pos.offset) === 40) {
                      result1 = "(";
                      advance(pos, 1);
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result1 !== null) {
                      result2 = parse_ws();
                      if (result2 !== null) {
                        result3 = parse_arglist();
                        if (result3 !== null) {
                          result4 = parse_ws();
                          if (result4 !== null) {
                            if (input.charCodeAt(pos.offset) === 41) {
                              result5 = ")";
                              advance(pos, 1);
                            } else {
                              result5 = null;
                              if (reportFailures === 0) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result5 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, v, args) { matches['primary']++; return loc({tag:"call", name:v, args:args }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    result0 = parse_identifier();
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, v) { matches['primary']++; return loc({tag:"ident", name:v }, [line, column]); })(pos0.offset, pos0.line, pos0.column, result0);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      if (input.charCodeAt(pos.offset) === 40) {
                        result0 = "(";
                        advance(pos, 1);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result0 !== null) {
                        result1 = parse_ws();
                        if (result1 !== null) {
                          result2 = parse_expression();
                          if (result2 !== null) {
                            result3 = parse_ws();
                            if (result3 !== null) {
                              if (input.charCodeAt(pos.offset) === 41) {
                                result4 = ")";
                                advance(pos, 1);
                              } else {
                                result4 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result4 !== null) {
                                result0 = [result0, result1, result2, result3, result4];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, expression) { matches['primary']++; return expression; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_comma_expression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 44) {
          result0 = ",";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ws();
          if (result1 !== null) {
            result2 = parse_expression();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, expr) { matches['comma_expression']++; return expr; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_arglist() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_expression();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_comma_expression();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_comma_expression();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { matches['arglist']++; return [first].concat(rest); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_comma_identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 44) {
          result0 = ",";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ws();
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, v) { matches['comma_identifier']++; return v; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ident_list() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_identifier();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_comma_identifier();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_comma_identifier();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { matches['ident_list']++; return [first].concat(rest); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_SourceChar() {
        var result0;
        
        if (/^[\0-\uFFFF]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\0-\\uFFFF]");
          }
        }
        return result0;
      }
      
      function parse_LineChar() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        result0 = parse_EOLChar();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_SourceChar();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_EOLChar() {
        var result0;
        
        if (/^[\n\x0B\f\r\x85\u2028\u2029]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\x0B\\f\\r\\x85\\u2028\\u2029]");
          }
        }
        return result0;
      }
      
      function parse_SpaceChar() {
        var result0;
        
        if (/^[\t \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006]");
          }
        }
        return result0;
      }
      
      function parse_CommentChar() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "//") {
          result0 = "//";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        return result0;
      }
      
      function parse_Comment() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_CommentChar();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_LineChar();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_LineChar();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ws() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_SpaceChar();
        if (result1 === null) {
          result1 = parse_EOLChar();
          if (result1 === null) {
            result1 = parse_Comment();
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_SpaceChar();
          if (result1 === null) {
            result1 = parse_EOLChar();
            if (result1 === null) {
              result1 = parse_Comment();
            }
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      
          var line = null;
          var column = null;
      
          var matches = {
              start: 0,
              number_frac: 0,
              number: 0,
              string: 0,
              array: 0,
              validfirstchar: 0,
              validchar: 0,
              identifier: 0,
              statement: 0,
              index: 0,
              statements: 0,
              expression: 0,
              or_op: 0,
              logic_or: 0,
              and_op: 0,
              logic_and: 0,
              comp_op: 0,
              comparative: 0,
              additive_op: 0,
              additive: 0,
              mult_op: 0,
              multiplicative: 0,
              primary: 0,
              comma_expression: 0,
              arglist: 0,
              comma_identifier: 0,
              ident_list: 0,
              ws: 0
          };
      
          function loc(obj, loc) {
            if (typeof loc[0] === 'number') {
              obj.loc = loc;
            }
            return obj;
          }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
if (typeof module !== "undefined") { module.exports = Tortoise.parser; }