var Elephant = Elephant || {};
Elephant.parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "exprs": parse_exprs,
        "exprline": parse_exprline,
        "exprpiece": parse_exprpiece,
        "expr": parse_expr,
        "atomlist": parse_atomlist,
        "identifierlist": parse_identifierlist,
        "atom": parse_atom,
        "quote": parse_quote,
        "list": parse_list,
        "set": parse_set,
        "map": parse_map,
        "mapentry": parse_mapentry,
        "blocks": parse_blocks,
        "block": parse_block,
        "do_kw": parse_do_kw,
        "doblock": parse_doblock,
        "fn_kw": parse_fn_kw,
        "fnblock": parse_fnblock,
        "if_kw": parse_if_kw,
        "ifblock": parse_ifblock,
        "else_kw": parse_else_kw,
        "elseblock": parse_elseblock,
        "loop_kw": parse_loop_kw,
        "loopblock": parse_loopblock,
        "primary": parse_primary,
        "access_op": parse_access_op,
        "unary_op": parse_unary_op,
        "exp_op": parse_exp_op,
        "mult_op": parse_mult_op,
        "add_op": parse_add_op,
        "shift_op": parse_shift_op,
        "bitwise_op": parse_bitwise_op,
        "comp_op": parse_comp_op,
        "lnot_op": parse_lnot_op,
        "land_op": parse_land_op,
        "lor_op": parse_lor_op,
        "assign_op": parse_assign_op,
        "access": parse_access,
        "unary": parse_unary,
        "exp": parse_exp,
        "mult": parse_mult,
        "add": parse_add,
        "shift": parse_shift,
        "bitwise": parse_bitwise,
        "comp": parse_comp,
        "lnot": parse_lnot,
        "land": parse_land,
        "lor": parse_lor,
        "assign": parse_assign,
        "type": parse_type,
        "listtype": parse_listtype,
        "arrowtype": parse_arrowtype,
        "basetype": parse_basetype,
        "S": parse_S,
        "WS": parse_WS,
        "Comment": parse_Comment,
        "integer": parse_integer,
        "float": parse_float,
        "boolean": parse_boolean,
        "AtomChar": parse_AtomChar,
        "LineChar": parse_LineChar,
        "EOLChar": parse_EOLChar,
        "SpaceChar": parse_SpaceChar,
        "QuoteChar": parse_QuoteChar,
        "OpenChar": parse_OpenChar,
        "CloseChar": parse_CloseChar,
        "OpenList": parse_OpenList,
        "CloseList": parse_CloseList,
        "OpenBlock": parse_OpenBlock,
        "CloseBlock": parse_CloseBlock,
        "CommentChar": parse_CommentChar,
        "SourceChar": parse_SourceChar,
        "EOF": parse_EOF,
        "EOL": parse_EOL
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "exprs";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_exprs() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_WS();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          result2 = parse_exprline();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_exprline();
          }
          if (result1 !== null) {
            result2 = parse_WS();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, es) { 
            if (es.length === 0) {
              return [];
            } else if (es.length === 1) {
              return es[0];
            } else {
              return [{value: 'do', tag: 'keyword'}].concat(es);
            }
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_exprline() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_exprpiece();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_exprpiece();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_EOL();
          if (result1 === null) {
            pos2 = pos;
            reportFailures++;
            result1 = parse_CloseBlock();
            reportFailures--;
            if (result1 !== null) {
              result1 = "";
              pos = pos2;
            } else {
              result1 = null;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, es) { return es.length === 1 ? es[0] : es; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_exprpiece() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_S();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_assign();
          if (result1 === null) {
            result1 = parse_blocks();
            if (result1 === null) {
              result1 = parse_atomlist();
              if (result1 === null) {
                result1 = parse_list();
                if (result1 === null) {
                  result1 = parse_set();
                  if (result1 === null) {
                    result1 = parse_map();
                    if (result1 === null) {
                      result1 = parse_quote();
                      if (result1 === null) {
                        result1 = parse_float();
                        if (result1 === null) {
                          result1 = parse_integer();
                          if (result1 === null) {
                            result1 = parse_boolean();
                            if (result1 === null) {
                              result1 = parse_atom();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result3 = parse_atomlist();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_atomlist();
              }
            } else {
              result2 = null;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e, cs) {
            var result = e;
            for (var i = 0, ilen = cs.length; i < ilen; ++i) {
              result = [result].concat(cs[i]);
            }
            return result;
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_expr() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_WS();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_assign();
          if (result1 === null) {
            result1 = parse_blocks();
            if (result1 === null) {
              result1 = parse_atomlist();
              if (result1 === null) {
                result1 = parse_list();
                if (result1 === null) {
                  result1 = parse_set();
                  if (result1 === null) {
                    result1 = parse_map();
                    if (result1 === null) {
                      result1 = parse_quote();
                      if (result1 === null) {
                        result1 = parse_float();
                        if (result1 === null) {
                          result1 = parse_integer();
                          if (result1 === null) {
                            result1 = parse_boolean();
                            if (result1 === null) {
                              result1 = parse_atom();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result3 = parse_atomlist();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_atomlist();
              }
            } else {
              result2 = null;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e, cs) {
            var result = e;
            for (var i = 0, ilen = cs.length; i < ilen; ++i) {
              result = [result].concat(cs[i]);
            }
            return result;
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_atomlist() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_OpenChar();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = [];
            result3 = parse_expr();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_expr();
            }
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_CloseChar();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, es) { return es; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_identifierlist() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_OpenChar();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = [];
            result3 = parse_atom();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_atom();
            }
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_CloseChar();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, as) { return as; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_atom() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_AtomChar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_AtomChar();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_WS();
          if (result1 !== null) {
            result2 = parse_type();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars, t) { result = { value: chars.join(''), tag: 'identifier' };
            if (t) { result.type = t; }
            return result;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_quote() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_QuoteChar();
        if (result0 !== null) {
          result1 = parse_expr();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e) { return ['quote', e]; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_list() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_OpenList();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = [];
            result3 = parse_expr();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_expr();
            }
            if (result2 !== null) {
              result3 = parse_CloseList();
              if (result3 !== null) {
                pos2 = pos;
                result4 = parse_WS();
                if (result4 !== null) {
                  result5 = parse_type();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, es, t) { result = { tag: 'literal', value: es};
            if (t) { result.type = t[1]; }
            return result;
          })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_set() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_OpenList();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 44) {
              result2 = ",";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = [];
                result5 = parse_expr();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_expr();
                }
                if (result4 !== null) {
                  result5 = parse_WS();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse_CloseList();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, es) { return ['set', es]; })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_map() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_OpenList();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse_mapentry();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_mapentry();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_CloseList();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, es) { return ['map', es]; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_OpenList();
          if (result0 !== null) {
            result1 = parse_WS();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result2 = ":";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_WS();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result4 = parse_CloseList();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset) { return ['map', []]; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_mapentry() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_expr();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 58) {
              result2 = ":";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, key, value) { return [key, value]; })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_blocks() {
        var result0;
        
        result0 = parse_fnblock();
        if (result0 === null) {
          result0 = parse_doblock();
          if (result0 === null) {
            result0 = parse_ifblock();
            if (result0 === null) {
              result0 = parse_loopblock();
              if (result0 === null) {
                result0 = parse_block();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_block() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_OpenBlock();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_exprs();
            if (result2 !== null) {
              result3 = parse_CloseBlock();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, es) { return es; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_do_kw() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "do") {
          result0 = "do";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"do\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, k) { return {tag: 'keyword', value: k}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_doblock() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_do_kw();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_identifierlist();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_block();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, k, a, b) { return a ? [k, a, b] : [k, [], b]; })(pos0, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_fn_kw() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "fn") {
          result0 = "fn";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"fn\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, k) { return {tag: 'keyword', value: k}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_fnblock() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_fn_kw();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_identifierlist();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_block();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, k, a, b) { return a ? [k, a, b] : [k, [], b]; })(pos0, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_if_kw() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "if") {
          result0 = "if";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"if\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, k) { return {tag: 'keyword', value: k}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ifblock() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_if_kw();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_expr();
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_expr();
                if (result4 !== null) {
                  result5 = parse_elseblock();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, k, e, b, els) { return els ? [k, e, b, els] : [k, e, b, []]; })(pos0, result0[0], result0[2], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_else_kw() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 4) === "else") {
          result0 = "else";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"else\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, k) { return {tag: 'keyword', value: k}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_elseblock() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_WS();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_else_kw();
          if (result1 !== null) {
            result2 = parse_WS();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_expr();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, b) { return b; })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_loop_kw() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 4) === "loop") {
          result0 = "loop";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"loop\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, k) { return {tag: 'keyword', value: k}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_loopblock() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_loop_kw();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_expr();
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_identifierlist();
                if (result4 !== null) {
                  result5 = parse_WS();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse_expr();
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = pos2;
                    }
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, k, e1, e2) { return e2 ? [k, e2[3], e2[1], e1] : [k, e1]; })(pos0, result0[0], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_primary() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_blocks();
        if (result0 === null) {
          result0 = parse_atomlist();
          if (result0 === null) {
            result0 = parse_list();
            if (result0 === null) {
              result0 = parse_set();
              if (result0 === null) {
                result0 = parse_map();
                if (result0 === null) {
                  result0 = parse_quote();
                  if (result0 === null) {
                    result0 = parse_float();
                    if (result0 === null) {
                      result0 = parse_integer();
                      if (result0 === null) {
                        result0 = parse_boolean();
                        if (result0 === null) {
                          result0 = parse_atom();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result2 = parse_atomlist();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_atomlist();
            }
          } else {
            result1 = null;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e, cs) {
            var result = e;
            for (var i = 0, ilen = cs.length; i < ilen; ++i) {
              result = [result].concat(cs[i]);
            }
            return result;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_access_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_unary_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 126) {
          result0 = "~";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"~\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_exp_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 94) {
          result0 = "^";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"^\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_mult_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 42) {
          result0 = "*";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 47) {
            result0 = "/";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 37) {
              result0 = "%";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "//") {
                result0 = "//";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"//\"");
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_add_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "++") {
          result0 = "++";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"++\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 45) {
            result0 = "-";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 43) {
              result0 = "+";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"+\"");
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_shift_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "<<") {
          result0 = "<<";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<<\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === ">>") {
            result0 = ">>";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\">>\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bitwise_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 38) {
          result0 = "&";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"&\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 124) {
            result0 = "|";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"|\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 2) === "><") {
              result0 = "><";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"><\"");
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_comp_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "<=") {
          result0 = "<=";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<=\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === ">=") {
            result0 = ">=";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\">=\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 2) === "!=") {
              result0 = "!=";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"!=\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "==") {
                result0 = "==";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"==\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 60) {
                  result0 = "<";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"<\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 62) {
                    result0 = ">";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 3) === "<=>") {
                      result0 = "<=>";
                      pos += 3;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"<=>\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 2) === "in") {
                        result0 = "in";
                        pos += 2;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"in\"");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_lnot_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 3) === "not") {
          result0 = "not";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"not\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_land_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 3) === "and") {
          result0 = "and";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"and\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_lor_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "or") {
          result0 = "or";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"or\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 3) === "xor") {
            result0 = "xor";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"xor\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_assign_op() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 61) {
          result0 = "=";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === ":=") {
            result0 = ":=";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\":=\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 2) === "^=") {
              result0 = "^=";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"^=\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "*=") {
                result0 = "*=";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*=\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 2) === "/=") {
                  result0 = "/=";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"/=\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 2) === "%=") {
                    result0 = "%=";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"%=\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 3) === "//=") {
                      result0 = "//=";
                      pos += 3;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"//=\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 2) === "+=") {
                        result0 = "+=";
                        pos += 2;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"+=\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 2) === "-=") {
                          result0 = "-=";
                          pos += 2;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"-=\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos, 3) === "++=") {
                            result0 = "++=";
                            pos += 3;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"++=\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 3) === "<<=") {
                              result0 = "<<=";
                              pos += 3;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"<<=\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos, 3) === ">>=") {
                                result0 = ">>=";
                                pos += 3;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\">>=\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos, 2) === "&=") {
                                  result0 = "&=";
                                  pos += 2;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"&=\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos, 2) === "|=") {
                                    result0 = "|=";
                                    pos += 2;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"|=\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos, 3) === "><=") {
                                      result0 = "><=";
                                      pos += 3;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"><=\"");
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, op) { return {value: op, tag: 'operator'}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_access() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_primary();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_WS();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_access_op();
            if (result3 !== null) {
              result4 = parse_WS();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_primary();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_WS();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_access_op();
              if (result3 !== null) {
                result4 = parse_WS();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_primary();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0, ilen = tail.length; i < ilen; ++i) {
                result = [tail[i][1], result];
                result.push(tail[i][3]);
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_unary() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_unary_op();
        if (result0 !== null) {
          result1 = parse_S();
          if (result1 !== null) {
            result2 = parse_access();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, op, head) { return [op, head]; })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_access();
        }
        return result0;
      }
      
      function parse_exp() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_unary();
        if (result0 !== null) {
          result1 = parse_S();
          if (result1 !== null) {
            result2 = parse_exp_op();
            if (result2 !== null) {
              result3 = parse_S();
              if (result3 !== null) {
                result4 = parse_exp();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, op, tail) { return [op, head, tail]; })(pos0, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_unary();
        }
        return result0;
      }
      
      function parse_mult() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_exp();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_S();
          if (result2 !== null) {
            result3 = parse_mult_op();
            if (result3 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result5 = parse_exp();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_S();
            if (result2 !== null) {
              result3 = parse_mult_op();
              if (result3 !== null) {
                result4 = parse_S();
                if (result4 !== null) {
                  result5 = parse_exp();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0, ilen = tail.length; i < ilen; ++i) {
                result = [tail[i][1], result];
                result.push(tail[i][3]);
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_add() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_mult();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_S();
          if (result2 !== null) {
            result3 = parse_add_op();
            if (result3 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result5 = parse_mult();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_S();
            if (result2 !== null) {
              result3 = parse_add_op();
              if (result3 !== null) {
                result4 = parse_S();
                if (result4 !== null) {
                  result5 = parse_mult();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0, ilen = tail.length; i < ilen; ++i) {
                result = [tail[i][1], result];
                result.push(tail[i][3]);
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_shift() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_add();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_S();
          if (result2 !== null) {
            result3 = parse_shift_op();
            if (result3 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result5 = parse_add();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_S();
            if (result2 !== null) {
              result3 = parse_shift_op();
              if (result3 !== null) {
                result4 = parse_S();
                if (result4 !== null) {
                  result5 = parse_add();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0, ilen = tail.length; i < ilen; ++i) {
                result = [tail[i][1], result];
                result.push(tail[i][3]);
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bitwise() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_shift();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_S();
          if (result2 !== null) {
            result3 = parse_bitwise_op();
            if (result3 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result5 = parse_shift();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_S();
            if (result2 !== null) {
              result3 = parse_bitwise_op();
              if (result3 !== null) {
                result4 = parse_S();
                if (result4 !== null) {
                  result5 = parse_shift();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0, ilen = tail.length; i < ilen; ++i) {
                result = [tail[i][1], result];
                result.push(tail[i][3]);
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_comp() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_bitwise();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_S();
          if (result2 !== null) {
            result3 = parse_comp_op();
            if (result3 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result5 = parse_bitwise();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_S();
            if (result2 !== null) {
              result3 = parse_comp_op();
              if (result3 !== null) {
                result4 = parse_S();
                if (result4 !== null) {
                  result5 = parse_bitwise();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0, ilen = tail.length; i < ilen; ++i) {
                result = [tail[i][1], result];
                result.push(tail[i][3]);
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_lnot() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_comp();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_S();
          if (result2 !== null) {
            result3 = parse_lnot_op();
            if (result3 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result5 = parse_comp();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_S();
            if (result2 !== null) {
              result3 = parse_lnot_op();
              if (result3 !== null) {
                result4 = parse_S();
                if (result4 !== null) {
                  result5 = parse_comp();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0, ilen = tail.length; i < ilen; ++i) {
                result = [tail[i][1], result];
                result.push(tail[i][3]);
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_land() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_lnot();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_S();
          if (result2 !== null) {
            result3 = parse_land_op();
            if (result3 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result5 = parse_lnot();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_S();
            if (result2 !== null) {
              result3 = parse_land_op();
              if (result3 !== null) {
                result4 = parse_S();
                if (result4 !== null) {
                  result5 = parse_lnot();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0, ilen = tail.length; i < ilen; ++i) {
                result = [tail[i][1], result];
                result.push(tail[i][3]);
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_lor() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_land();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_S();
          if (result2 !== null) {
            result3 = parse_lor_op();
            if (result3 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result5 = parse_land();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_S();
            if (result2 !== null) {
              result3 = parse_lor_op();
              if (result3 !== null) {
                result4 = parse_S();
                if (result4 !== null) {
                  result5 = parse_land();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              var result = head;
              for (var i = 0, ilen = tail.length; i < ilen; ++i) {
                result = [tail[i][1], result];
                result.push(tail[i][3]);
              }
              return result;
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_assign() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_lor();
        if (result0 !== null) {
          result1 = parse_S();
          if (result1 !== null) {
            result2 = parse_assign_op();
            if (result2 !== null) {
              result3 = parse_S();
              if (result3 !== null) {
                result4 = parse_assign();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, op, tail) { return [op, head, tail]; })(pos0, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_lor();
        }
        return result0;
      }
      
      function parse_type() {
        var result0;
        
        result0 = parse_arrowtype();
        if (result0 === null) {
          result0 = parse_listtype();
          if (result0 === null) {
            result0 = parse_basetype();
          }
        }
        return result0;
      }
      
      function parse_listtype() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_OpenList();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_type();
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_CloseList();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) { return {tag: 'listtype', inner: t}; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_arrowtype() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_OpenChar();
        if (result0 !== null) {
          result1 = parse_WS();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_type();
            if (result2 !== null) {
              result3 = parse_WS();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.substr(pos, 2) === "->") {
                  result4 = "->";
                  pos += 2;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"->\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_WS();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse_type();
                    if (result6 !== null) {
                      result7 = parse_WS();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = parse_CloseChar();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, l, r) { return {tag: 'arrowtype', left:l, right:r }; })(pos0, result0[2], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_basetype() {
        var result0, result1;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 7) === "integer") {
          result0 = "integer";
          pos += 7;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"integer\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 5) === "float") {
            result0 = "float";
            pos += 5;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"float\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 7) === "boolean") {
              result0 = "boolean";
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"boolean\"");
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          pos3 = pos;
          reportFailures++;
          result1 = parse_AtomChar();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos3;
          }
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) { return {tag: 'basetype', name: t}; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_S() {
        var result0, result1;
        
        result1 = parse_SpaceChar();
        if (result1 === null) {
          result1 = parse_Comment();
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_SpaceChar();
            if (result1 === null) {
              result1 = parse_Comment();
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_WS() {
        var result0, result1;
        
        result1 = parse_SpaceChar();
        if (result1 === null) {
          result1 = parse_EOLChar();
          if (result1 === null) {
            result1 = parse_Comment();
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_SpaceChar();
            if (result1 === null) {
              result1 = parse_EOLChar();
              if (result1 === null) {
                result1 = parse_Comment();
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_Comment() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_CommentChar();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_LineChar();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_LineChar();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_integer() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_AtomChar();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, d) { return { value: parseInt(d.join(''), 10), tag: 'literal', type: { tag: 'basetype', name: 'integer' }}; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_float() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (/^[0-9]/.test(input.charAt(pos))) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[0-9]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, d, f) { return { value: parseFloat(d.join('') + '.' + f.join(''), 10), tag: 'literal', type: { tag: 'basetype', name: 'float' }}; })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = [];
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 46) {
              result1 = ".";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result1 !== null) {
              if (/^[0-9]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  if (/^[0-9]/.test(input.charAt(pos))) {
                    result3 = input.charAt(pos);
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, d, f) { return { value: parseFloat(d.join('') + '.' + f.join(''), 10), tag: 'literal', type: { tag: 'basetype', name: 'float' }}; })(pos0, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_boolean() {
        var result0, result1;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 4) === "true") {
          result0 = "true";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 5) === "false") {
            result0 = "false";
            pos += 5;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          pos3 = pos;
          reportFailures++;
          result1 = parse_AtomChar();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos3;
          }
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, b) { return { value: b === 'true', tag: 'literal', type: {tag: 'basetype', name: 'boolean'}}})(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AtomChar() {
        var result0;
        
        if (/^[0-9a-zA-Z_?!+\-=@#$%^&*\/]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-zA-Z_?!+\\-=@#$%^&*\\/]");
          }
        }
        return result0;
      }
      
      function parse_LineChar() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_EOLChar();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result1 = parse_SourceChar();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EOLChar() {
        var result0;
        
        if (/^[\n\x0B\f\r\x85\u2028\u2029]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\x0B\\f\\r\\x85\\u2028\\u2029]");
          }
        }
        return result0;
      }
      
      function parse_SpaceChar() {
        var result0;
        
        if (/^[\t \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006]");
          }
        }
        return result0;
      }
      
      function parse_QuoteChar() {
        var result0;
        
        if (input.charCodeAt(pos) === 39) {
          result0 = "'";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        return result0;
      }
      
      function parse_OpenChar() {
        var result0;
        
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        return result0;
      }
      
      function parse_CloseChar() {
        var result0;
        
        if (input.charCodeAt(pos) === 41) {
          result0 = ")";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\")\"");
          }
        }
        return result0;
      }
      
      function parse_OpenList() {
        var result0;
        
        if (input.charCodeAt(pos) === 91) {
          result0 = "[";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        return result0;
      }
      
      function parse_CloseList() {
        var result0;
        
        if (input.charCodeAt(pos) === 93) {
          result0 = "]";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"]\"");
          }
        }
        return result0;
      }
      
      function parse_OpenBlock() {
        var result0;
        
        if (input.charCodeAt(pos) === 123) {
          result0 = "{";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        return result0;
      }
      
      function parse_CloseBlock() {
        var result0;
        
        if (input.charCodeAt(pos) === 125) {
          result0 = "}";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"}\"");
          }
        }
        return result0;
      }
      
      function parse_CommentChar() {
        var result0;
        
        if (input.substr(pos, 2) === ";;") {
          result0 = ";;";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";;\"");
          }
        }
        return result0;
      }
      
      function parse_SourceChar() {
        var result0;
        
        if (/^[\0-\uFFFF]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\0-\\uFFFF]");
          }
        }
        return result0;
      }
      
      function parse_EOF() {
        var result0;
        var pos0;
        
        pos0 = pos;
        reportFailures++;
        result0 = parse_SourceChar();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EOL() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_EOLChar();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_EOLChar();
        }
        if (result0 !== null) {
          result1 = parse_EOF();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result1 = parse_EOLChar();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_EOLChar();
            }
          } else {
            result0 = null;
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
if (typeof module !== "undefined") { module.exports = Elephant.parser; }