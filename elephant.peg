start = exprs

exprs = WS? es:exprline* WS?
  { 
    if (es.length === 0) {
      return [];
    } else if (es.length === 1) {
      return es[0];
    } else {
      return [{value: 'do', tag: 'keyword'}].concat(es);
    }
  }

exprline = es:exprpiece+ (EOL / &CloseBlock)
  { return es.length === 1 ? es[0] : es; }

exprpiece = S? e:(infix / blocks / atomlist / list / set / map / quote / float / integer / boolean / atom) cs:(atomlist+)?
  {
    var result = e;
    for (var i = 0, ilen = cs.length; i < ilen; ++i) {
      result = [result].concat(cs[i]);
    }
    return result;
  }

expr = WS? e:(infix / blocks / atomlist / list / set / map / quote / float / integer / boolean / atom) cs:(atomlist+)?
  {
    var result = e;
    for (var i = 0, ilen = cs.length; i < ilen; ++i) {
      result = [result].concat(cs[i]);
    }
    return result;
  }

atomlist
  = OpenChar WS? es:expr* WS? CloseChar
    { return es; }

identifierlist
  = OpenChar WS? as:atom* WS? CloseChar
    { return as; }

atom = chars:AtomChar+ t:(WS type)?
  { result = { value: chars.join(''), tag: 'identifier' };
    if (t) { result.type = t; }
    return result;
  }

quote = QuoteChar e:expr
  { return ['quote', e]; }

list = OpenList WS? es:expr* CloseList t:(WS type)?
  { result = { tag: 'literal', value: es};
    if (t) { result.type = t[1]; }
    return result;
  }

set
  = OpenList WS? ',' WS? es:expr* WS? CloseList
    { return ['set', es]; }

map
  = OpenList WS? es:mapentry+ WS? CloseList
    { return ['map', es]; }
  / OpenList WS? ':' WS? CloseList
    { return ['map', []]; }

mapentry = key:expr WS? ':' WS? value:expr
  { return [key, value]; }

// support for structured blocks using {}

  blocks
    = fnblock
    / doblock
    / ifblock
    / loopblock
    / block

  block = OpenBlock WS? es:exprs CloseBlock
    { return es; }

  do_kw = k:'do'
    { return {tag: 'keyword', value: k}; }
  doblock = k:do_kw WS? a:identifierlist? WS? b:block
    { return a ? [k, a, b] : [k, [], b]; }

  fn_kw = k:'fn'
    { return {tag: 'keyword', value: k}; }
  fnblock = k:fn_kw WS? a:identifierlist? WS? b:block
    { return a ? [k, a, b] : [k, [], b]; }

  if_kw = k:'if'
    { return {tag: 'keyword', value: k}; }
  ifblock = k:if_kw WS? e:expr WS? b:expr els:elseblock?
    { return els ? [k, e, b, els] : [k, e, b, []]; }

  else_kw = k:'else'
    { return {tag: 'keyword', value: k}; }
  elseblock = WS? else_kw WS? b:expr
    { return b; }

  loop_kw = k:'loop'
    { return {tag: 'keyword', value: k}; }
  loopblock = k:loop_kw WS? e1:expr e2:(WS? identifierlist WS? expr)?
    { return e2 ? [k, e2[3], e2[1], e1] : [k, e1]; }

// infix operators, higher precedence first

  infix = assign
  primary = e:(blocks / atomlist / list / set / map / quote / float / integer / boolean / atom) cs:(atomlist+)?
  {
    var result = e;
    for (var i = 0, ilen = cs.length; i < ilen; ++i) {
      result = [result].concat(cs[i]);
    }
    return result;
  }
  access_op = op:('.')
    { return {value: op, tag: 'operator'}; }
  unary_op = op:('~')
    { return {value: op, tag: 'operator'}; }
  exp_op = op:('^')
    { return {value: op, tag: 'operator'}; }
  mult_op = op:('*' / '/' / '%' / '//')
    { return {value: op, tag: 'operator'}; }
  add_op = op:('++' / '-' / '+')
    { return {value: op, tag: 'operator'}; }
  shift_op = op:('<<' / '>>')
    { return {value: op, tag: 'operator'}; }  
  bitwise_op = op:('&' / '|' / '><')
    { return {value: op, tag: 'operator'}; }
  comp_op = op:('<=' / '>=' / '!=' / '==' / '<' / '>' / '<=>' / 'in')
    { return {value: op, tag: 'operator'}; }
  lnot_op = op:('not')
    { return {value: op, tag: 'operator'}; }
  land_op = op:('and')
    { return {value: op, tag: 'operator'}; }
  lor_op = op:('or' / 'xor')
    { return {value: op, tag: 'operator'}; }
  assign_op
    = op:('=' / ':='
    / '^='
    / '*=' / '/=' / '%=' / '//='
    / '+=' / '-=' / '++='
    / '<<=' / '>>='
    / '&=' / '|=' / '><=')
    { return {value: op, tag: 'operator'}; }

  access = head:primary tail:(WS? op:access_op WS? primary)*
    {
      var result = head;
      for (var i = 0, ilen = tail.length; i < ilen; ++i) {
        result = [tail[i][1], result];
        result.push(tail[i][3]);
      }
      return result;
    }

  unary
    = op:unary_op S head:access
      { return [op, head]; }
    / access

  exp
    = head:unary S op:exp_op S tail:exp
      { return [op, head, tail]; }
    / unary

  mult = head:exp tail:(S mult_op S exp)*
    {
      var result = head;
      for (var i = 0, ilen = tail.length; i < ilen; ++i) {
        result = [tail[i][1], result];
        result.push(tail[i][3]);
      }
      return result;
    }

  add = head:mult tail:(S add_op S mult)*
    {
      var result = head;
      for (var i = 0, ilen = tail.length; i < ilen; ++i) {
        result = [tail[i][1], result];
        result.push(tail[i][3]);
      }
      return result;
    }

  shift = head:add tail:(S shift_op S add)*
    {
      var result = head;
      for (var i = 0, ilen = tail.length; i < ilen; ++i) {
        result = [tail[i][1], result];
        result.push(tail[i][3]);
      }
      return result;
    }

  bitwise = head:shift tail:(S bitwise_op S shift)*
    {
      var result = head;
      for (var i = 0, ilen = tail.length; i < ilen; ++i) {
        result = [tail[i][1], result];
        result.push(tail[i][3]);
      }
      return result;
    }

  comp = head:bitwise tail:(S comp_op S bitwise)*
    {
      var result = head;
      for (var i = 0, ilen = tail.length; i < ilen; ++i) {
        result = [tail[i][1], result];
        result.push(tail[i][3]);
      }
      return result;
    }

  lnot = head:comp tail:(S lnot_op S comp)*
    {
      var result = head;
      for (var i = 0, ilen = tail.length; i < ilen; ++i) {
        result = [tail[i][1], result];
        result.push(tail[i][3]);
      }
      return result;
    }

  land = head:lnot tail:(S land_op S lnot)*
    {
      var result = head;
      for (var i = 0, ilen = tail.length; i < ilen; ++i) {
        result = [tail[i][1], result];
        result.push(tail[i][3]);
      }
      return result;
    }

  lor = head:land tail:(S lor_op S land)*
    {
      var result = head;
      for (var i = 0, ilen = tail.length; i < ilen; ++i) {
        result = [tail[i][1], result];
        result.push(tail[i][3]);
      }
      return result;
    }

  assign
    = head:lor S op:assign_op S tail:assign
      { return [op, head, tail]; }
    / lor

// types

type = arrowtype / listtype / basetype

listtype = OpenList WS? t:type WS? CloseList
  { return {tag: 'listtype', inner: t}; }

arrowtype = OpenChar WS? l:type WS? '->' WS? r:type WS? CloseChar
  { return {tag: 'arrowtype', left:l, right:r }; }

basetype = t:('integer' / 'float' / 'boolean') &(!(AtomChar))
  { return {tag: 'basetype', name: t}; }

// character classes

  S = (SpaceChar / Comment)+
  WS = (SpaceChar / EOLChar / Comment)+
  Comment = CommentChar LineChar*
  integer = d:[0-9]+ !(AtomChar)
    { return { value: parseInt(d.join(''), 10), tag: 'literal', type: { tag: 'basetype', name: 'integer' }}; }
  float
    = d:[0-9]+ '.' f:[0-9]*
      { return { value: parseFloat(d.join('') + '.' + f.join(''), 10), tag: 'literal', type: { tag: 'basetype', name: 'float' }}; }
    / d:[0-9]* '.' f:[0-9]+
      { return { value: parseFloat(d.join('') + '.' + f.join(''), 10), tag: 'literal', type: { tag: 'basetype', name: 'float' }}; }
  boolean
    = b:('true' / 'false') &(!(AtomChar))
      { return { value: b === 'true', tag: 'literal', type: {tag: 'basetype', name: 'boolean'}}}

  AtomChar = [0-9a-zA-Z_?!+\-=@#$%^&*/]
  LineChar = (!(EOLChar) SourceChar)
  EOLChar = [\u000a\u000b\u000c\u000d\u0085\u2028\u2029]
  SpaceChar = [\u0009\u0020\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006]
  QuoteChar = "'"
  OpenChar = '('
  CloseChar = ')'
  OpenList = '['
  CloseList = ']'
  OpenBlock = '{'
  CloseBlock = '}'
  CommentChar = ';;'
  SourceChar = [\u0000-\uffff]
  EOF = !(SourceChar)
  EOL = (EOLChar)* EOF
      / (EOLChar)+