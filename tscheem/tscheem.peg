start = expression

expression = WS? e:(quote / integer / atom / atomlist) WS?
  { return e; }

atomlist = OpenChar es:expression* CloseChar
  { return es; }

atom = chars:AtomChar+ t:(WS type)?
  { return t ? {name:chars.join(''), type:t[1]} : chars.join(''); }

quote = QuoteChar e:expression
  { return ['quote', e]; }

type = arrowtype / basetype

arrowtype = OpenChar WS? l:type WS? "->" WS? r:type WS? CloseChar
  { return {tag: 'arrowtype', left:l, right:r }; }

basetype = t:("number" / "boolean") &(!(AtomChar))
  { return {tag: 'basetype', name: t}; }

WS = (SpaceChar / EOLChar / Comment)+
Comment = CommentChar LineChar*
integer = d:[0-9]+ { return parseInt(d.join(''), 10); }

AtomChar = [0-9a-zA-Z_?!+\-=@#$%^&*/.]
LineChar = (!(EOLChar) SourceChar)
EOLChar = [\u000a\u000b\u000c\u000d\u0085\u2028\u2029]
SpaceChar = [\u0009\u0020\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006]
QuoteChar = "'"
OpenChar = '('
CloseChar = ')'
CommentChar = ';;'
SourceChar = [\u0000-\uffff]